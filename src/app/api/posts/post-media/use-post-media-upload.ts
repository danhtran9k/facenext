import { useState } from "react";

import { useToast } from "@core/app-shadcn/use-toast";
import { useUploadThing } from "@core/app-vendor/uploadthing.ts";
import { splitFilename } from "@core/helper/filename.utils";

export interface Attachment {
  file: File;
  mediaId?: string;
  isUploading: boolean;
}

export function usePostMediaUpload() {
  const { toast } = useToast();

  // attachments l√† client state ho√†n to√†n,
  // khi ƒëang uploading logic ui s·∫Ω ch·∫∑n ko cho g·ªçi set
  const [attachments, setAttachments] = useState<Attachment[]>([]);
  const [uploadProgress, setUploadProgress] = useState<number>();

  // ·ªü ƒë√¢y setup ƒë∆°n gi·∫£n ch·ªâ remove ·ªü client, do media upload n√†y c≈©ng l∆∞u t·∫°m
  // n·∫øu post ko ƒë∆∞·ª£c t·∫°o th√¨ be s·∫Ω cronjob schedule clean up
  // c·ªë g·∫Øng x·ª≠ l√Ω g·ªçi api clear c≈©ng ok nh∆∞ng d·ªÖ g√¢y l·ªói - edge case ko c·∫ßn thi·∫øt
  function removeAttachment(fileName: string) {
    setAttachments(prev => prev.filter(a => a.file.name !== fileName));
  }

  function reset() {
    setAttachments([]);
    setUploadProgress(undefined);
  }

  // https://docs.uploadthing.com/api-reference/react#configuration-3
  const { startUpload, isUploading } = useUploadThing("attachment", {
    onBeforeUploadBegin(files) {
      // m·∫πo rename file ƒë·ªÉ khi BE tr·∫£ v·ªÅ c√≥ th·ªÉ match v·ªõi state client
      // Tuy nhi√™n c√°ch l√†m n√†y modified file name g·ªëc khi upload
      // Trade-off
      const renamedFiles = files.map(file => {
        const { name, extensionWithDot } = splitFilename(file.name);
        const newFileName = `${name}_${crypto.randomUUID()}${extensionWithDot}`;

        return new File([file], newFileName, {
          type: file.type,
        });
      });

      // c√≥ th·ªÉ ch·ªçn xong l·∫°i ch·ªçn ti·∫øp
      setAttachments(prev => [
        ...prev,
        ...renamedFiles.map(file => ({ file, isUploading: true })),
      ]);

      return renamedFiles;
    },
    onUploadProgress: setUploadProgress,
    // v√¨ ƒëang d√πng setup c·ªßa Next - fullstack n√™n res n√™n ƒë∆∞·ª£c type t·ª´ helper
    onClientUploadComplete(res) {
      // set state isUploading = false ƒë·ªëi v·ªõi c√°c file client match res
      // v√¨ ƒë√£ trick filename ·ªü tr√™n n√™n c√≥ th·ªÉ ƒë·∫£m b·∫£o unique
      // ki·ªÉu ƒÉn gian filename th√†nh 1 id trung gian gi·ªØa client v√† server
      // -> m√† ko c·∫ßn d√πng mediaId t·ª´ db
      setAttachments(prevAttachments =>
        prevAttachments.map(prev => {
          const uploadResult = res.find(r => r.name === prev.file.name);

          return uploadResult
            ? {
                ...prev,
                mediaId: uploadResult.serverData.mediaId,
                isUploading: false,
              }
            : prev;
        }),
      );
    },
    onUploadError(err) {
      console.log("üöÄ ~ onUploadError ~ err:", err);
      // X·ª≠ l√Ω h∆°i c·ª±c ƒëoan, cancel to√†n b·ªô isUploading
      // c√≥ th·ªÉ x·ª≠ l√Ω ri√™ng t·ª´ng file nh∆∞ng ph·∫£i d√πng 1 state enum, boolean ko ƒë·ªß, v√† logic s·∫Ω c√†ng ph·ª©c t·∫°p th√™m feature n√†y
      setAttachments(prev => prev.filter(a => !a.isUploading));
      toast({
        variant: "destructive",
        description: err.message,
      });
    },
  });

  function handleStartUpload(files: File[]) {
    // ch·ªâ cho ph√©p g·ªçi upload khi ko c√≥ file n√†o ƒëang upload
    // v√¨ limit c·ªßa th∆∞ vi·ªán, ko track status ri√™ng t·ª´ng file ƒë∆∞·ª£c
    // ƒë·ªìng th·ªùi progress n·∫øu nhi·ªÅu c·ª•m file ƒëi ƒë·ªìng th·ªùi nh∆∞ng l·ªách nhau g√¢y v·∫•n ƒë·ªÅ
    // TRADE-OFF
    if (isUploading) {
      toast({
        variant: "destructive",
        description: "Please wait for the current upload to finish.",
      });
      return;
    }

    // Ch·ªâ ph√≤ng th·ªß FE, n·∫øu d√πng api tr·ª±c ti·∫øp th√¨ BE ph·∫£i limit ri√™ng
    // B·∫£n ch·∫•t BE ƒëang limit ri√™ng 5 m·ªói lo·∫°i
    if (attachments.length + files.length > 5) {
      toast({
        variant: "destructive",
        description: "You can only upload up to 5 attachments per post.",
      });
      return;
    }

    startUpload(files);
  }

  return {
    attachments,
    isUploading,
    uploadProgress,
    startUpload: handleStartUpload,
    removeAttachment,
    reset,
  };
}
