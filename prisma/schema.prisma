generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id           String   @id
  username     String   @unique
  displayName  String
  email        String?  @unique
  passwordHash String?
  googleId     String?  @unique
  avatarUrl    String?
  bio          String?
  createdAt    DateTime @default(now())

  posts    Post[]
  sessions Session[]

  following Follow[] @relation("Follower")
  followers Follow[] @relation("Following")

  Like      Like[]
  bookmarks Bookmark[]
  comments  Comment[]

  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Post {
  id      String @id @default(cuid())
  userId  String
  content String

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  attachments Media[]
  likes       Like[]
  bookmarks   Bookmark[]
  comments    Comment[]

  linkedNotifications Notification[]

  @@map("posts")
}

// many-to-many relation
model Follow {
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Follower", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

// media trỏ về UploadThing nên delete ko Cascade để có thể track ngược về cronJob delete sau
// postId có thể null vì logic cho người dùng upload media tạm nhưng có quyền ko post ngay
// việc upload tạm giúp giảm thời gian khi post bài vì media đã gửi trước

model Media {
  id   String    @id @default(cuid())
  url  String
  type MediaType

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@map("post_media")
}

// https://github.com/prisma/prisma/issues/273
enum MediaType {
  IMAGE @map("IMAGE")
  VIDEO @map("VIDEO")
}

// 1 to Big many relation
// ko gộp vào user được vì quá nhiều
model Like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

// ý tưởng cũng tương tự với Like
model Bookmark {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Comment {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  content   String
  createdAt DateTime @default(now())

  @@map("comments")
}

// Ý tưởng của Following nhưng double field relation
// issuer là người trigger notification -> ở đây là người comment, like, bookmark
// ý tưởng noti này đúng là là noti Post, ko phải noti tổng quát
// ví dụ noti về event, noti bảo mật, socket ... thì cần thêm table khác
model Notification {
  id String @id @default(cuid())

  recipientId String
  recipient   User   @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)

  issuerId String
  issuer   User   @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  type NotificationType
  read Boolean          @default(false)

  createdAt DateTime @default(now())

  @@map("notifications")
}

// Thử Enum ko manual map
// Bản thân noti này đang setup đúng chỉ sử dụng cho Post only
// Và Post cũng có concept bookmark, check logic trong code
enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}
