generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id           String    @id
  username     String    @unique
  displayName  String
  email        String?   @unique
  passwordHash String?
  googleId     String?   @unique
  avatarUrl    String?
  bio          String?
  createdAt    DateTime  @default(now())
  posts        Post[]
  sessions     Session[]
  following    Follow[]  @relation("Follower")
  followers    Follow[]  @relation("Following")

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Post {
  id          String   @id @default(cuid())
  userId      String
  content     String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments Media[]

  @@map("posts")
}

// many-to-many relation
model Follow {
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Follower", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

// media trỏ về UploadThing nên delete ko Cascade để có thể track ngược về cronJob delete sau
// postId có thể null vì logic cho người dùng upload media tạm nhưng có quyền ko post ngay
// việc upload tạm giúp giảm thời gian khi post bài vì media đã gửi trước

model Media {
  id   String    @id @default(cuid())
  url  String
  type MediaType

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@map("post_media")
}

// https://github.com/prisma/prisma/issues/273
enum MediaType {
  IMAGE @map("IMAGE")
  VIDEO @map("VIDEO")
}
